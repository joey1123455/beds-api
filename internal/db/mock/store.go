// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/joey1123455/beds-api/internal/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination internal/db/mock/store.go github.com/joey1123455/beds-api/internal/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/joey1123455/beds-api/internal/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ActivateUser mocks base method.
func (m *MockStore) ActivateUser(arg0 context.Context, arg1 db.ActivateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateUser indicates an expected call of ActivateUser.
func (mr *MockStoreMockRecorder) ActivateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUser", reflect.TypeOf((*MockStore)(nil).ActivateUser), arg0, arg1)
}

// Begin mocks base method.
func (m *MockStore) Begin() (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockStoreMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockStore)(nil).Begin))
}

// ChangeUserName mocks base method.
func (m *MockStore) ChangeUserName(arg0 context.Context, arg1 db.ChangeUserNameParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserName indicates an expected call of ChangeUserName.
func (mr *MockStoreMockRecorder) ChangeUserName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserName", reflect.TypeOf((*MockStore)(nil).ChangeUserName), arg0, arg1)
}

// ChangeUserPassword mocks base method.
func (m *MockStore) ChangeUserPassword(arg0 context.Context, arg1 db.ChangeUserPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserPassword indicates an expected call of ChangeUserPassword.
func (mr *MockStoreMockRecorder) ChangeUserPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword", reflect.TypeOf((*MockStore)(nil).ChangeUserPassword), arg0, arg1)
}

// ChangeUserPin mocks base method.
func (m *MockStore) ChangeUserPin(arg0 context.Context, arg1 db.ChangeUserPinParams) (sql.NullString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPin", arg0, arg1)
	ret0, _ := ret[0].(sql.NullString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserPin indicates an expected call of ChangeUserPin.
func (mr *MockStoreMockRecorder) ChangeUserPin(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPin", reflect.TypeOf((*MockStore)(nil).ChangeUserPin), arg0, arg1)
}

// ChangeUserVerifyCode mocks base method.
func (m *MockStore) ChangeUserVerifyCode(arg0 context.Context, arg1 db.ChangeUserVerifyCodeParams) (sql.NullString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserVerifyCode", arg0, arg1)
	ret0, _ := ret[0].(sql.NullString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserVerifyCode indicates an expected call of ChangeUserVerifyCode.
func (mr *MockStoreMockRecorder) ChangeUserVerifyCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserVerifyCode", reflect.TypeOf((*MockStore)(nil).ChangeUserVerifyCode), arg0, arg1)
}

// CreateCPasswordResetToken mocks base method.
func (m *MockStore) CreateCPasswordResetToken(arg0 context.Context, arg1 db.CreateCPasswordResetTokenParams) (db.PasswordResetToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCPasswordResetToken", arg0, arg1)
	ret0, _ := ret[0].(db.PasswordResetToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCPasswordResetToken indicates an expected call of CreateCPasswordResetToken.
func (mr *MockStoreMockRecorder) CreateCPasswordResetToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCPasswordResetToken", reflect.TypeOf((*MockStore)(nil).CreateCPasswordResetToken), arg0, arg1)
}

// CreateLogin2faToken mocks base method.
func (m *MockStore) CreateLogin2faToken(arg0 context.Context, arg1 db.CreateLogin2faTokenParams) (db.Login2fatoken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogin2faToken", arg0, arg1)
	ret0, _ := ret[0].(db.Login2fatoken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogin2faToken indicates an expected call of CreateLogin2faToken.
func (mr *MockStoreMockRecorder) CreateLogin2faToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogin2faToken", reflect.TypeOf((*MockStore)(nil).CreateLogin2faToken), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserProfile mocks base method.
func (m *MockStore) CreateUserProfile(arg0 context.Context, arg1 db.CreateUserProfileParams) (db.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserProfile", arg0, arg1)
	ret0, _ := ret[0].(db.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserProfile indicates an expected call of CreateUserProfile.
func (mr *MockStoreMockRecorder) CreateUserProfile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserProfile", reflect.TypeOf((*MockStore)(nil).CreateUserProfile), arg0, arg1)
}

// DeleteLogin2faToken mocks base method.
func (m *MockStore) DeleteLogin2faToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogin2faToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogin2faToken indicates an expected call of DeleteLogin2faToken.
func (mr *MockStoreMockRecorder) DeleteLogin2faToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogin2faToken", reflect.TypeOf((*MockStore)(nil).DeleteLogin2faToken), arg0, arg1)
}

// DeletePasswordResetToken mocks base method.
func (m *MockStore) DeletePasswordResetToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePasswordResetToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePasswordResetToken indicates an expected call of DeletePasswordResetToken.
func (mr *MockStoreMockRecorder) DeletePasswordResetToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePasswordResetToken", reflect.TypeOf((*MockStore)(nil).DeletePasswordResetToken), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetLogin2faToken mocks base method.
func (m *MockStore) GetLogin2faToken(arg0 context.Context, arg1 string) (db.Login2fatoken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogin2faToken", arg0, arg1)
	ret0, _ := ret[0].(db.Login2fatoken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogin2faToken indicates an expected call of GetLogin2faToken.
func (mr *MockStoreMockRecorder) GetLogin2faToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogin2faToken", reflect.TypeOf((*MockStore)(nil).GetLogin2faToken), arg0, arg1)
}

// GetPasswordResetToken mocks base method.
func (m *MockStore) GetPasswordResetToken(arg0 context.Context, arg1 string) (db.PasswordResetToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordResetToken", arg0, arg1)
	ret0, _ := ret[0].(db.PasswordResetToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordResetToken indicates an expected call of GetPasswordResetToken.
func (mr *MockStoreMockRecorder) GetPasswordResetToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordResetToken", reflect.TypeOf((*MockStore)(nil).GetPasswordResetToken), arg0, arg1)
}

// GetPasswordResetTokenByUserID mocks base method.
func (m *MockStore) GetPasswordResetTokenByUserID(arg0 context.Context, arg1 uuid.UUID) (db.PasswordResetToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordResetTokenByUserID", arg0, arg1)
	ret0, _ := ret[0].(db.PasswordResetToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordResetTokenByUserID indicates an expected call of GetPasswordResetTokenByUserID.
func (mr *MockStoreMockRecorder) GetPasswordResetTokenByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordResetTokenByUserID", reflect.TypeOf((*MockStore)(nil).GetPasswordResetTokenByUserID), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserProfile mocks base method.
func (m *MockStore) GetUserProfile(arg0 context.Context, arg1 uuid.UUID) (db.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", arg0, arg1)
	ret0, _ := ret[0].(db.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockStoreMockRecorder) GetUserProfile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockStore)(nil).GetUserProfile), arg0, arg1)
}

// GetUserProfileByUserID mocks base method.
func (m *MockStore) GetUserProfileByUserID(arg0 context.Context, arg1 uuid.UUID) (db.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfileByUserID", arg0, arg1)
	ret0, _ := ret[0].(db.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfileByUserID indicates an expected call of GetUserProfileByUserID.
func (mr *MockStoreMockRecorder) GetUserProfileByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfileByUserID", reflect.TypeOf((*MockStore)(nil).GetUserProfileByUserID), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockStore) GetUsers(arg0 context.Context, arg1 db.GetUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockStoreMockRecorder) GetUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockStore)(nil).GetUsers), arg0, arg1)
}

// UpdateRegistrationStatus mocks base method.
func (m *MockStore) UpdateRegistrationStatus(arg0 context.Context, arg1 db.UpdateRegistrationStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegistrationStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRegistrationStatus indicates an expected call of UpdateRegistrationStatus.
func (mr *MockStoreMockRecorder) UpdateRegistrationStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistrationStatus", reflect.TypeOf((*MockStore)(nil).UpdateRegistrationStatus), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UserEnableMfa mocks base method.
func (m *MockStore) UserEnableMfa(arg0 context.Context, arg1 db.UserEnableMfaParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserEnableMfa", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserEnableMfa indicates an expected call of UserEnableMfa.
func (mr *MockStoreMockRecorder) UserEnableMfa(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserEnableMfa", reflect.TypeOf((*MockStore)(nil).UserEnableMfa), arg0, arg1)
}

// WithTx mocks base method.
func (m *MockStore) WithTx(arg0 *sql.Tx) *db.Queries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0)
	ret0, _ := ret[0].(*db.Queries)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockStoreMockRecorder) WithTx(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockStore)(nil).WithTx), arg0)
}
