// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: password_reset_token.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCPasswordResetToken = `-- name: CreateCPasswordResetToken :one
INSERT INTO password_reset_token
    (user_id, token, created_at, expires_at)
VALUES
    ($1, $2, $3, $4)
RETURNING id, user_id, token, created_at, expires_at
`

type CreateCPasswordResetTokenParams struct {
	UserID    uuid.UUID    `json:"user_id"`
	Token     string       `json:"token"`
	CreatedAt sql.NullTime `json:"created_at"`
	ExpiresAt time.Time    `json:"expires_at"`
}

func (q *Queries) CreateCPasswordResetToken(ctx context.Context, arg CreateCPasswordResetTokenParams) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, createCPasswordResetToken,
		arg.UserID,
		arg.Token,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deletePasswordResetToken = `-- name: DeletePasswordResetToken :exec
DELETE FROM password_reset_token
WHERE token = $1
`

func (q *Queries) DeletePasswordResetToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deletePasswordResetToken, token)
	return err
}

const getPasswordResetToken = `-- name: GetPasswordResetToken :one
SELECT id, user_id, token, created_at, expires_at
FROM password_reset_token
WHERE token = $1
LIMIT 1
`

func (q *Queries) GetPasswordResetToken(ctx context.Context, token string) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, getPasswordResetToken, token)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getPasswordResetTokenByUserID = `-- name: GetPasswordResetTokenByUserID :one
SELECT id, user_id, token, created_at, expires_at
FROM password_reset_token
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetPasswordResetTokenByUserID(ctx context.Context, userID uuid.UUID) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, getPasswordResetTokenByUserID, userID)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
