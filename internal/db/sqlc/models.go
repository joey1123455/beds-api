// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type UserRoles string

const (
	UserRolesCUSTOMER   UserRoles = "CUSTOMER"
	UserRolesADMIN      UserRoles = "ADMIN"
	UserRolesSUPERADMIN UserRoles = "SUPERADMIN"
	UserRolesSTAFF      UserRoles = "STAFF"
)

func (e *UserRoles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRoles(s)
	case string:
		*e = UserRoles(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRoles: %T", src)
	}
	return nil
}

type NullUserRoles struct {
	UserRoles UserRoles `json:"user_roles"`
	Valid     bool      `json:"valid"` // Valid is true if UserRoles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRoles) Scan(value interface{}) error {
	if value == nil {
		ns.UserRoles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRoles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRoles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRoles), nil
}

type Login2fatoken struct {
	ID        uuid.UUID    `json:"id"`
	UserID    uuid.UUID    `json:"user_id"`
	Token     string       `json:"token"`
	CreatedAt sql.NullTime `json:"created_at"`
	ExpiresAt time.Time    `json:"expires_at"`
}

type PasswordResetToken struct {
	ID        uuid.UUID    `json:"id"`
	UserID    uuid.UUID    `json:"user_id"`
	Token     string       `json:"token"`
	CreatedAt sql.NullTime `json:"created_at"`
	ExpiresAt time.Time    `json:"expires_at"`
}

type User struct {
	ID                    uuid.UUID      `json:"id"`
	Username              sql.NullString `json:"username"`
	Email                 string         `json:"email"`
	Password              string         `json:"password"`
	Pin                   sql.NullString `json:"pin"`
	EmailVerified         bool           `json:"email_verified"`
	VerifyCode            sql.NullString `json:"verify_code"`
	CodeExpireTime        sql.NullTime   `json:"code_expire_time"`
	UserRole              UserRoles      `json:"user_role"`
	MfaEnabled            bool           `json:"mfa_enabled"`
	CreatedAt             time.Time      `json:"created_at"`
	UpdatedAt             time.Time      `json:"updated_at"`
	RegistrationCompleted sql.NullBool   `json:"registration_completed"`
}

type UserProfile struct {
	ID          uuid.UUID      `json:"id"`
	FirstName   sql.NullString `json:"first_name"`
	LastName    sql.NullString `json:"last_name"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Street      sql.NullString `json:"street"`
	City        sql.NullString `json:"city"`
	State       sql.NullString `json:"state"`
	Country     sql.NullString `json:"country"`
	PostalCode  sql.NullString `json:"postal_code"`
	UserID      uuid.UUID      `json:"user_id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}
