// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE users
SET email_verified = TRUE, verify_code = NULL, code_expire_time = NULL, 
    updated_at = $2
WHERE id = $1
`

type ActivateUserParams struct {
	ID        uuid.UUID `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) ActivateUser(ctx context.Context, arg ActivateUserParams) error {
	_, err := q.db.ExecContext(ctx, activateUser, arg.ID, arg.UpdatedAt)
	return err
}

const changeUserName = `-- name: ChangeUserName :exec
UPDATE users
SET username = COALESCE($2, username), updated_at = COALESCE($3, updated_at)
WHERE id = $1
`

type ChangeUserNameParams struct {
	ID        uuid.UUID      `json:"id"`
	Username  sql.NullString `json:"username"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) ChangeUserName(ctx context.Context, arg ChangeUserNameParams) error {
	_, err := q.db.ExecContext(ctx, changeUserName, arg.ID, arg.Username, arg.UpdatedAt)
	return err
}

const changeUserPassword = `-- name: ChangeUserPassword :exec
UPDATE users
SET password = $2, updated_at = $3
WHERE id = $1
`

type ChangeUserPasswordParams struct {
	ID        uuid.UUID `json:"id"`
	Password  string    `json:"password"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) ChangeUserPassword(ctx context.Context, arg ChangeUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, changeUserPassword, arg.ID, arg.Password, arg.UpdatedAt)
	return err
}

const changeUserPin = `-- name: ChangeUserPin :one
UPDATE users
SET pin = $2, updated_at = $3
WHERE id = $1
RETURNING pin
`

type ChangeUserPinParams struct {
	ID        uuid.UUID      `json:"id"`
	Pin       sql.NullString `json:"pin"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) ChangeUserPin(ctx context.Context, arg ChangeUserPinParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, changeUserPin, arg.ID, arg.Pin, arg.UpdatedAt)
	var pin sql.NullString
	err := row.Scan(&pin)
	return pin, err
}

const changeUserVerifyCode = `-- name: ChangeUserVerifyCode :one
UPDATE users
SET verify_code = $2, code_expire_time = $3, updated_at = $4
WHERE id = $1
RETURNING verify_code
`

type ChangeUserVerifyCodeParams struct {
	ID             uuid.UUID      `json:"id"`
	VerifyCode     sql.NullString `json:"verify_code"`
	CodeExpireTime sql.NullTime   `json:"code_expire_time"`
	UpdatedAt      time.Time      `json:"updated_at"`
}

func (q *Queries) ChangeUserVerifyCode(ctx context.Context, arg ChangeUserVerifyCodeParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, changeUserVerifyCode,
		arg.ID,
		arg.VerifyCode,
		arg.CodeExpireTime,
		arg.UpdatedAt,
	)
	var verify_code sql.NullString
	err := row.Scan(&verify_code)
	return verify_code, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, email, password, 
    verify_code, code_expire_time, pin, 
    user_role, created_at, updated_at)
VALUES (
    $1, $2, $3, $4, 
    $5, $6, $7, $8,
    $9
    ) RETURNING id, username, email, password, pin, email_verified, verify_code, code_expire_time, user_role, mfa_enabled, created_at, updated_at, registration_completed
`

type CreateUserParams struct {
	Username       sql.NullString `json:"username"`
	Email          string         `json:"email"`
	Password       string         `json:"password"`
	VerifyCode     sql.NullString `json:"verify_code"`
	CodeExpireTime sql.NullTime   `json:"code_expire_time"`
	Pin            sql.NullString `json:"pin"`
	UserRole       UserRoles      `json:"user_role"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.VerifyCode,
		arg.CodeExpireTime,
		arg.Pin,
		arg.UserRole,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Pin,
		&i.EmailVerified,
		&i.VerifyCode,
		&i.CodeExpireTime,
		&i.UserRole,
		&i.MfaEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RegistrationCompleted,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password, pin, email_verified, verify_code, code_expire_time, user_role, mfa_enabled, created_at, updated_at, registration_completed FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Pin,
		&i.EmailVerified,
		&i.VerifyCode,
		&i.CodeExpireTime,
		&i.UserRole,
		&i.MfaEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RegistrationCompleted,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, pin, email_verified, verify_code, code_expire_time, user_role, mfa_enabled, created_at, updated_at, registration_completed FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Pin,
		&i.EmailVerified,
		&i.VerifyCode,
		&i.CodeExpireTime,
		&i.UserRole,
		&i.MfaEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RegistrationCompleted,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, email, password, pin, email_verified, verify_code, code_expire_time, user_role, mfa_enabled, created_at, updated_at, registration_completed FROM users LIMIT $1 OFFSET $2
`

type GetUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Pin,
			&i.EmailVerified,
			&i.VerifyCode,
			&i.CodeExpireTime,
			&i.UserRole,
			&i.MfaEnabled,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RegistrationCompleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRegistrationStatus = `-- name: UpdateRegistrationStatus :exec
UPDATE users
SET registration_completed = $2, 
    updated_at = $3
WHERE id = $1
`

type UpdateRegistrationStatusParams struct {
	ID                    uuid.UUID    `json:"id"`
	RegistrationCompleted sql.NullBool `json:"registration_completed"`
	UpdatedAt             time.Time    `json:"updated_at"`
}

func (q *Queries) UpdateRegistrationStatus(ctx context.Context, arg UpdateRegistrationStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateRegistrationStatus, arg.ID, arg.RegistrationCompleted, arg.UpdatedAt)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    username = COALESCE($2, username),
    email = COALESCE($3, email),
    updated_at = COALESCE($4, updated_at),
    user_role = COALESCE($5, user_role)
WHERE id = $1
RETURNING id, username, email, password, pin, email_verified, verify_code, code_expire_time, user_role, mfa_enabled, created_at, updated_at, registration_completed
`

type UpdateUserParams struct {
	ID        uuid.UUID      `json:"id"`
	Username  sql.NullString `json:"username"`
	Email     string         `json:"email"`
	UpdatedAt time.Time      `json:"updated_at"`
	UserRole  UserRoles      `json:"user_role"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.UpdatedAt,
		arg.UserRole,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Pin,
		&i.EmailVerified,
		&i.VerifyCode,
		&i.CodeExpireTime,
		&i.UserRole,
		&i.MfaEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RegistrationCompleted,
	)
	return i, err
}

const userEnableMfa = `-- name: UserEnableMfa :exec
UPDATE users
SET mfa_enabled = TRUE, updated_at = $2 
WHERE id = $1
`

type UserEnableMfaParams struct {
	ID        uuid.UUID `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UserEnableMfa(ctx context.Context, arg UserEnableMfaParams) error {
	_, err := q.db.ExecContext(ctx, userEnableMfa, arg.ID, arg.UpdatedAt)
	return err
}
