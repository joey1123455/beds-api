// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: login2fa.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createLogin2faToken = `-- name: CreateLogin2faToken :one
INSERT INTO login2faToken (user_id, token, created_at, expires_at) VALUES ($1, $2, $3, $4) RETURNING id, user_id, token, created_at, expires_at
`

type CreateLogin2faTokenParams struct {
	UserID    uuid.UUID    `json:"user_id"`
	Token     string       `json:"token"`
	CreatedAt sql.NullTime `json:"created_at"`
	ExpiresAt time.Time    `json:"expires_at"`
}

func (q *Queries) CreateLogin2faToken(ctx context.Context, arg CreateLogin2faTokenParams) (Login2fatoken, error) {
	row := q.db.QueryRowContext(ctx, createLogin2faToken,
		arg.UserID,
		arg.Token,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i Login2fatoken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteLogin2faToken = `-- name: DeleteLogin2faToken :exec
DELETE FROM login2faToken WHERE token = $1
`

func (q *Queries) DeleteLogin2faToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteLogin2faToken, token)
	return err
}

const getLogin2faToken = `-- name: GetLogin2faToken :one
SELECT id, user_id, token, created_at, expires_at FROM login2faToken WHERE token = $1 LIMIT 1
`

func (q *Queries) GetLogin2faToken(ctx context.Context, token string) (Login2fatoken, error) {
	row := q.db.QueryRowContext(ctx, getLogin2faToken, token)
	var i Login2fatoken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
